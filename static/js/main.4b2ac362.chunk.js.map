{"version":3,"sources":["app/hooks.ts","features/patients/patientsAPI.ts","features/patients/patientsSlice.ts","components/AgeDataSummary.tsx","components/FhirExplainer.tsx","components/PatientAgePlot.tsx","components/PatientsTable.tsx","features/patients/Patients.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","fetchPatients","page","pageSize","requestURL","URL","searchParams","set","String","axios","get","toString","fetchPatientsAsync","createAsyncThunk","a","response","data","patientsSlice","createSlice","name","initialState","patients","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","entry","forEach","patient","resource","id","rejected","selectAllPatients","createSelector","Object","values","age","birthDate","ageDifMs","Date","now","parse","ageDate","Math","abs","getUTCFullYear","selectAllPatientAges","filter","map","selectPatientsLoadingState","CountSummary","count","label","AgeDataSummary","allPatients","allAges","patientLoadingState","pediatricPatientCount","length","averageAge","reduce","sumOfAges","className","toFixed","FhirExplainer","href","PatientAgePlot","ageBuckets","Array","fill","floor","options","responsive","maintainAspectRatio","labels","_","i","datasets","backgroundColor","borderColor","borderWidth","PatientRow","patientName","primaryName","given","family","join","text","PatientsTable","firstBirthday","dispatch","useDispatch","patientsLoadingState","useState","onlyPediatric","setOnlyPediatric","togglePediatric","useCallback","op","pediatricBirthdayCutoff","setFullYear","getFullYear","pediatricPatients","onLoadButtonClick","useEffect","type","checked","onChange","disabled","onClick","Patients","App","store","configureStore","reducer","patientsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b2ac362.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from \"axios\";\n\nimport { Patient } from \"./patientsSlice\";\n\nexport interface FetchPatientResponseShape {\n  entry: {\n    resource: Patient;\n  }[];\n}\n\nexport function fetchPatients(page: number = 1, pageSize: number = 10) {\n  const requestURL = new URL(\"https://hapi.fhir.org/baseR4/Patient\");\n  requestURL.searchParams.set(\"_pretty\", \"false\");\n  requestURL.searchParams.set(\"_count\", String(pageSize));\n  requestURL.searchParams.set(\"_offset\", String((page - 1) * pageSize));\n  requestURL.searchParams.set(\"_include\", \"Patient:link\");\n  // Most of the patients on the demo server don't have birthdays,\n  // to keep this demo interesting, query by birthday to filter them out\n  // My patient interface still allows for this to be absent,\n  // so comment out this line if you like.\n  requestURL.searchParams.set(\"birthdate\", \"gt1900-01-01\");\n  requestURL.searchParams.set(\"birthdate\", \"lt2021-10-17\");\n  return axios.get<FetchPatientResponseShape>(requestURL.toString());\n}\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { fetchPatients } from \"./patientsAPI\";\n\n// Define a tiny subset of the patient model.\n// In a production setting I'd certainly be using https://www.npmjs.com/package/@types/fhir\n// Or another FHIR wrapper, but for this assignment I'm just going to use a slice\nexport interface Patient {\n  id: string;\n  name:\n    | (\n        | {\n            family: string;\n            given: string[];\n            text?: string;\n          }\n        | {\n            family: never;\n            given: never;\n            text: string;\n          }\n        | { family: never; given: never; text: never }\n      )[]\n    | undefined;\n  birthDate?: string;\n}\n\nexport interface PatientsState {\n  status: \"idle\" | \"loading\" | \"failed\";\n  patients: {\n    [id in string]: Patient;\n  };\n}\n\nconst initialState: PatientsState = {\n  patients: {},\n  status: \"idle\",\n};\n\nexport const fetchPatientsAsync = createAsyncThunk(\n  \"patients/fetchPatients\",\n  async ({ page = 1, pageSize = 10 }: { page?: number; pageSize?: number }) => {\n    const response = await fetchPatients(page, pageSize);\n    return response.data;\n  }\n);\n\nexport const patientsSlice = createSlice({\n  name: \"patients\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPatientsAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPatientsAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        action.payload.entry.forEach(\n          (patient) => (state.patients[patient.resource.id] = patient.resource)\n        );\n      })\n      .addCase(fetchPatientsAsync.rejected, (state) => {\n        state.status = \"failed\";\n      });\n  },\n});\n\nexport const selectPatientById = (\n  state: RootState,\n  id: string\n): Patient | undefined => state.patients.patients[id];\nexport const selectAllPatients = createSelector(\n  (state: RootState) => state.patients.patients,\n  Object.values as (patients: any) => Patient[]\n);\n\nconst age = ({ birthDate }: Patient & { birthDate: string }): number => {\n  // birthday is a date\n  var ageDifMs = Date.now() - Date.parse(birthDate);\n  var ageDate = new Date(ageDifMs); // miliseconds from epoch\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n};\n\nexport const selectAllPatientAges = createSelector(\n  selectAllPatients,\n  (patients: Patient[]) =>\n    patients\n      .filter(\n        (patient): patient is Patient & { birthDate: string } =>\n          !!patient.birthDate\n      )\n      .map(age)\n);\n\nexport const selectPatientsYoungerThan = (firstBirthday: Date) =>\n  createSelector(selectAllPatients, (patients: Patient[]) =>\n    patients.filter(\n      ({ birthDate }) => birthDate && new Date(birthDate) > firstBirthday\n    )\n  );\n\nexport const selectPatientsLoadingState = (state: RootState) =>\n  state.patients.status;\n\nexport default patientsSlice.reducer;\n","import { useAppSelector } from \"../app/hooks\";\nimport {\n  selectAllPatients,\n  selectAllPatientAges,\n  selectPatientsLoadingState,\n} from \"../features/patients/patientsSlice\";\n\nimport \"./AgeDataSummary.scss\";\n\nconst AgeDataSummary = () => {\n  const allPatients = useAppSelector(selectAllPatients);\n  const allAges = useAppSelector(selectAllPatientAges);\n  const patientLoadingState = useAppSelector(selectPatientsLoadingState);\n\n  const pediatricPatientCount = allAges.filter((age) => age < 18).length;\n  const averageAge =\n    allAges.reduce((sumOfAges, age) => sumOfAges + age, 0) / allAges.length;\n\n  return (\n    <div className=\"AgeDataSummary\">\n      <h2>Data Summary</h2>\n      {patientLoadingState === \"loading\" ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <h3>In the loaded data there are...</h3>\n          <ul>\n            <li>\n              <CountSummary count={allPatients.length} label=\"Total Patient\"/>\n            </li>\n            <li>\n              <CountSummary count={pediatricPatientCount} label=\"Pediatric Patient\"/>\n            </li>\n            <li>\n              Average Age <strong>{averageAge.toFixed(2)}</strong> (of Patients\n              with Known Ages)\n            </li>\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst CountSummary = ({count, label}: {count: number, label: string}) => <><strong>{count}</strong> {label}{ count === 1 ? '' : 's'}</>\n\nexport default AgeDataSummary;\n","import \"./FhirExplainer.scss\";\n\nconst FhirExplainer = () => {\n  return (\n    <div className=\"FhirExplainer\">\n      <h3>What is FHIR?</h3>\n      <article>\n        FHIR is a standard for health care data exchange, published by HL7. It\n        makes very pleasantly structured healthcare data available from many\n        systems.\n      </article>\n      <h3>What is this demo?</h3>\n      <article>\n        This demo uses the\n        <a href=\"http://hapi.fhir.org/resource?encoding=null&pretty=false&resource=Patient\">\n          {\" UHN HAPI FHIR  \"}\n        </a>\n        (University Health Network) (HL7 application programming interface)\n        (Fast Healthcare Interoperability Resources) server to fetch patients,\n        and perfom some simple birthdate and age related analsis on them. Use\n        the table view to view all the loaded data and load more\n      </article>\n    </div>\n  );\n};\n\nexport default FhirExplainer;\n","import { Bar } from \"react-chartjs-2\";\nimport { useAppSelector } from \"../app/hooks\";\nimport { selectAllPatientAges } from \"../features/patients/patientsSlice\";\n\nimport \"./PatientAgePlot.scss\";\n\nconst PatientAgePlot = () => {\n  const allAges = useAppSelector(selectAllPatientAges);\n\n  const agePlotStep = 10;\n  const ageBuckets = Array(10).fill(0);\n\n  allAges.forEach((age) => {\n    ageBuckets[Math.floor(age / agePlotStep)] += 1;\n  });\n\n  return (\n    <div className=\"PatientAgePlot\">\n      <h2>Loaded Patient Ages</h2>\n      <div className=\"PatientAgePlot__chart\">\n        <Bar\n          options={{ responsive: true, maintainAspectRatio: false }}\n          data={{\n            labels: ageBuckets.map(\n              (_, i) => `${i * agePlotStep} - ${(i + 1) * agePlotStep - 1}`\n            ),\n            datasets: [\n              {\n                label: \"Patient Count\",\n                data: ageBuckets,\n                backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n                borderColor: \"rgba(54, 162, 235, 1)\",\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PatientAgePlot;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport {\n  selectAllPatients,\n  selectPatientsLoadingState,\n  selectPatientsYoungerThan,\n  fetchPatientsAsync,\n  Patient,\n} from \"../features/patients/patientsSlice\";\n\nimport \"./PatientsTable.scss\";\n\nconst PatientsTable = () => {\n  const dispatch = useAppDispatch();\n\n  const allPatients = useAppSelector(selectAllPatients);\n  const patientsLoadingState = useAppSelector(selectPatientsLoadingState);\n\n  const [onlyPediatric, setOnlyPediatric] = useState(false);\n  const togglePediatric = useCallback(() => setOnlyPediatric((op) => !op), []);\n  // This whole thing gets a little weird if a user session lasts long enough that patient turns 18\n  // This is a proof of concept though, so I'm not going to get stuck on it\n  // This definition is also kinda goofy, but I don't want to import a full date library\n  const pediatricBirthdayCutoff = new Date(\n    new Date().setFullYear(new Date().getFullYear() - 18)\n  );\n\n  const pediatricPatients = useAppSelector(\n    selectPatientsYoungerThan(pediatricBirthdayCutoff)\n  );\n\n  const onLoadButtonClick = useCallback(\n    () =>\n      dispatch(\n        fetchPatientsAsync({\n          pageSize: 10,\n          page: Math.floor(allPatients.length / 10) + 1,\n        })\n      ),\n    [dispatch, allPatients.length]\n  );\n\n  useEffect(() => {\n    if (patientsLoadingState === \"idle\" && !allPatients.length)\n      onLoadButtonClick();\n  }, [allPatients.length, onLoadButtonClick, patientsLoadingState]);\n\n  return (\n    <div className=\"PatientsTable\">\n      <h2>Loaded Patients</h2>\n      <section className=\"PatientsTable__filters\">\n        <h3>Filters</h3>\n        <input\n          type=\"checkbox\"\n          checked={onlyPediatric}\n          onChange={togglePediatric}\n        />\n        <label>Only Show Pediatric Patients?</label>\n      </section>\n      <div className=\"PatientsTable__table-container\">\n        <table>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Birthdate</th>\n          </tr>\n          {(onlyPediatric ? pediatricPatients : allPatients).map(PatientRow)}\n        </table>\n      </div>\n      <button\n        disabled={patientsLoadingState === \"loading\"}\n        onClick={onLoadButtonClick}\n      >\n        {patientsLoadingState === \"loading\" ? \"Loading\" : \"Load More Patients\"}\n      </button>\n    </div>\n  );\n};\n\nconst PatientRow = (patient: Patient) => {\n  /* Goodness the FHIR Name implimentation is rich, I bet there's a really nice `to_user_readable_name()`\n       in your library, I've gone for a catch-most approachI don't want to reimpliment it here*/\n  let patientName = \"No Name\";\n  const primaryName = patient.name && patient.name[0];\n\n  if (primaryName?.given && primaryName.family)\n    patientName = [...primaryName.given, primaryName.family].join(\" \");\n  else if (primaryName?.text) patientName = primaryName.text;\n\n  return (\n    <tr>\n      <td>{patient.id}</td>\n      <td>{patientName}</td>\n      <td>{patient.birthDate ?? \"No Birthdate\"}</td>\n    </tr>\n  );\n};\n\nexport default PatientsTable;\n","import AgeDataSummary from \"../../components/AgeDataSummary\";\nimport FhirExplainer from \"../../components/FhirExplainer\";\nimport PatientAgePlot from \"../../components/PatientAgePlot\";\nimport PatientsTable from \"../../components/PatientsTable\";\n\nimport \"./Patients.scss\";\n\n// All these components could likely get fleshed out into their own pages with routes and\n// everything, but for a little demo like this, I kinda dig the 'All on one page' look\nexport function Patients() {\n  return (\n    <div className=\"Patients\">\n      <div className=\"left-pane\">\n        <FhirExplainer />\n        <AgeDataSummary />\n        <PatientAgePlot />\n      </div>\n      <PatientsTable />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Patients } from \"./features/patients/Patients\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <h1>Ryan's Redux FHIR Demo</h1>\n      <Patients />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport patientsReducer from \"../features/patients/patientsSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    patients: patientsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}